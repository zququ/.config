"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
async function activate(context) {
    const config = coc_nvim_1.workspace.getConfiguration().get('sourcekit', {});
    if (config.enable === false) {
        return;
    }
    let commandPath = config.commandPath;
    if (!commandPath) {
        try {
            commandPath = (await coc_nvim_1.workspace.runCommand('xcrun --find sourcekit-lsp')).trim();
        }
        catch (_a) {
            coc_nvim_1.workspace.showMessage("Cannot find sourcekit-lsp. Install Xcode 11.4+ or set `sourcekit.commandPath` in your coc-config.");
            return;
        }
    }
    let args = [];
    const sdkPath = config.sdkPath;
    const sdk = config.sdk;
    if (sdkPath) {
        args = args.concat(['-Xswiftc', '-sdk', '-Xswiftc', sdkPath]);
    }
    else if (sdk) {
        try {
            const computedSdkPath = (await coc_nvim_1.workspace.runCommand(`xcrun --sdk ${sdk} --show-sdk-path`)).trim();
            args = args.concat(['-Xswiftc', '-sdk', '-Xswiftc', computedSdkPath]);
        }
        catch (_b) {
            coc_nvim_1.workspace.showMessage(`Cannot find SDK path for '${sdk}'. Change 'sourcekit.sdk' or set 'sourcekit.sdkPath' in your coc-config.`);
        }
    }
    const targetArch = config.targetArch;
    if (targetArch) {
        args = args.concat(['-Xswiftc', '-target', '-Xswiftc', targetArch]);
    }
    args = args.concat(config.args);
    const serverOptions = {
        command: commandPath,
        args: args,
        transport: coc_nvim_1.TransportKind.stdio
    };
    const clientOptions = {
        documentSelector: ['swift']
    };
    const client = new coc_nvim_1.LanguageClient('sourcekit', 'sourcekit', serverOptions, clientOptions);
    context.subscriptions.push(coc_nvim_1.services.registLanguageClient(client));
}
exports.activate = activate;
//# sourceMappingURL=extension.js.map